@page "/products"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Components.Web

<style>
    .products-header {
        background: linear-gradient(135deg, #2196F3 0%, #e3f2fd 100%);
        padding: 32px;
        border-radius: 16px;
        margin-bottom: 30px;
        box-shadow: 0 10px 30px rgba(33, 150, 243, 0.3);
    }

    .products-title {
        color: white;
        font-size: 2rem;
        font-weight: 700;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 15px;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .action-buttons-group {
        animation: slideInRight 0.4s ease-out;
    }

    @@keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    .search-card {
        background: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        margin-bottom: 25px;
    }

    .product-card {
        background: white;
        border-radius: 12px;
        border: 1px solid #e3f2fd;
        transition: all 0.3s ease;
        margin-bottom: 15px;
        overflow: hidden;
    }

    .product-card:hover {
        box-shadow: 0 8px 24px rgba(102, 126, 234, 0.15);
        transform: translateY(-3px);
        border-color: #667eea;
    }

    .product-image-container {
        width: 100%;
        height: 150px;
        background: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
        position: relative;
    }

    .product-image-container img {
        max-width: 100%;
        max-height: 100%;
        object-fit: cover;
    }

    .product-info {
        padding: 15px;
    }

    .product-name {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 8px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .product-description {
        font-size: 0.9rem;
        color: #6c757d;
        margin-bottom: 10px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .product-price {
        font-size: 1.3rem;
        font-weight: bold;
        color: #27ae60;
        margin-bottom: 10px;
    }

    .product-stats {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
        margin-bottom: 10px;
    }

    .stats-badge {
        background: #e3f2fd;
        color: #1976d2;
        padding: 4px 12px;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .product-actions {
        padding: 12px 15px;
        background: #f8f9fa;
        border-top: 1px solid #e3f2fd;
        display: flex;
        gap: 8px;
        justify-content: flex-end;
    }

    .product-icon {
        width: 45px;
        height: 45px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.2rem;
    }

    .image-gallery {
        display: flex;
        gap: 4px;
        flex-wrap: wrap;
        margin-top: 8px;
    }

    .image-gallery img {
        width: 35px;
        height: 35px;
        border-radius: 6px;
        object-fit: cover;
        border: 2px solid #e3f2fd;
    }
</style>

@if (Products is null)
{
    <div class="spinner" />
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
        <!-- Header -->
        <div class="products-header">
            <div class="d-flex justify-content-between align-items-center flex-wrap" style="gap: 16px;">
                <h1 class="products-title mb-0">
                    <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large" />
                    Gestión de Productos
                </h1>
                <div class="action-buttons-group">
                    <MudButton Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.Add"
                               Size="Size.Large"
                               Href="/products/create"
                               Style="background: #2196f3;
                                      color: #f8f9fa;
                                      font-weight: 600;
                                      padding: 12px 28px;
                                      text-transform: none;
                                      font-size: 1rem;
                                      box-shadow: 0 4px 12px rgba(255,255,255,0.3);
                                      border-radius: 12px;">
                        Nuevo Producto
                    </MudButton>
                </div>
            </div>
        </div>

        <!-- Search Section -->
        <div class="search-card">
            <MudGrid Spacing="3" Justify="Justify.SpaceBetween">
                <MudItem xs="12" md="8">
                    <MudTextField @bind-Value="Filter"
                                  Label="Buscar productos"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  FullWidth="true"
                                  OnKeyUp="HandleKeyPress"
                                  Placeholder="Ingrese el nombre del producto..." />
                </MudItem>
                <MudItem xs="12" md="4" Class="d-flex align-items-center gap-2">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Info"
                               StartIcon="@Icons.Material.Filled.FilterList"
                               FullWidth="true"
                               OnClick="ApplyFilterAsync">
                        Filtrar
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Error"
                               StartIcon="@Icons.Material.Filled.Clear"
                               FullWidth="true"
                               OnClick="CleanFilterAsync">
                        Limpiar
                    </MudButton>
                </MudItem>
            </MudGrid>
        </div>

        <!-- Products Grid -->
        <MudGrid>
            @foreach (var product in Products)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <div class="product-card">
                        <div class="product-image-container">
                            @if (product.ProductImages != null && product.ProductImages.Any())
                            {
                                var firstImage = Convert.ToBase64String(product.ProductImages.First().Imagefile);
                                <img src="data:image/png;base64,@firstImage" alt="@product.Name" />
                            }
                            else
                            {
                                <div class="product-icon">
                                    <MudIcon Icon="@Icons.Material.Filled.Image" Size="Size.Large" />
                                </div>
                            }
                        </div>
                        <div class="product-info">
                            <div class="product-name">@product.Name</div>
                            <div class="product-description">@product.Description</div>
                            <div class="product-price">@($"{product.Price:C2}")</div>
                            <div class="product-stats">
                                <span class="stats-badge">
                                    <MudIcon Icon="@Icons.Material.Filled.Inventory2" Size="Size.Small" />
                                    Stock: @($"{product.Stock:N2}")
                                </span>
                                <span class="stats-badge">
                                    <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Small" />
                                    @product.ProductCategoriesNumber Cat.
                                </span>
                                <span class="stats-badge">
                                    <MudIcon Icon="@Icons.Material.Filled.Image" Size="Size.Small" />
                                    @product.ProductImagesNumber Img.
                                </span>
                            </div>
                            @if (product.ProductImages != null && product.ProductImages.Count() > 1)
                            {
                                <div class="image-gallery">
                                    @foreach (var image in product.ProductImages.Take(5))
                                    {
                                        var imageBase64 = Convert.ToBase64String(image.Imagefile);
                                        <img src="data:image/png;base64,@imageBase64" alt="Imagen del producto" />
                                    }
                                    @if (product.ProductImages.Count() > 5)
                                    {
                                        <div style="width: 35px; height: 35px; border-radius: 6px; background: #e3f2fd; display: flex; align-items: center; justify-content: center; font-size: 0.75rem; color: #1976d2; font-weight: 600;">
                                            +@(product.ProductImages.Count() - 5)
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                        <div class="product-actions">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Warning"
                                       StartIcon="@Icons.Material.Filled.Edit"
                                       Size="Size.Small"
                                       Href="@($"/products/edit/{product.Id}")">
                                Editar
                            </MudButton>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       Size="Size.Small"
                                       OnClick="@(() => Delete(product.Id))">
                                Eliminar
                            </MudButton>
                        </div>
                    </div>
                </MudItem>
            }
        </MudGrid>

      
    </MudContainer>
}

@code {
    private int currentPage = 1;
    private int totalPages;

    public List<Product>? Products { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/products?page={page}";
            url2 = $"api/products/totalPages";
        }
        else
        {
            url1 = $"api/products?page={page}&filter={Filter}";
            url2 = $"api/products/totalPages?filter={Filter}";
        }

        try
        {
            var responseHppt = await repository.Get<List<Product>>(url1);
            var responseHppt2 = await repository.Get<int>(url2);
            Products = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Delete(int productId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/products/{productId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
                return;
            }

            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }

        await LoadAsync(1);
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ApplyFilterAsync();
        }
    }
}
