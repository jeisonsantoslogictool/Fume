@page "/products/edit/{ProductId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

@if (loading)
{
    <div class="spinner" />
}
else
{
    <ProductForm @ref="productForm"
                 ProductDTO="productDTO"
                 SelectedCategories="selectedCategories"
                 NonSelectedCategories="nonSelectedCategories"
                 SelectedSubCategories="selectedSubCategories"
                 NonSelectedSubCategories="nonSelectedSubCategories"
                 OnValidSubmit="SaveChangesAsync"
                 ReturnAction="Return"
                 IsEdit="true"
                 AddImageAction="AddImageAsync"
                 RemoveImageAction="RemoveImageAsyc" />
}

@code {
    private ProductDTO productDTO = new ProductDTO
        {
            ProductCategoryIds = new List<int>(),
            ProductSubCategoryIds = new List<int>(),
            ProductImages = new List<string>()
        };

    private ProductForm? productForm;
    private List<Category> selectedCategories = new();
    private List<Category> nonSelectedCategories = new();
    private List<SubCategory> selectedSubCategories = new();
    private List<SubCategory> nonSelectedSubCategories = new();
    private bool loading = true;
    private Product? product;

    [Parameter]
    public int ProductId { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadProductAsync();
        await LoadCategoriesAsync();
        await LoadSubCategoriesAsync();
    }

    private async Task AddImageAsync()
    {
    }

    private async Task RemoveImageAsyc()
    {
    }

    private async Task LoadProductAsync()
    {
        loading = true;
        var httpResponse = await repository.Get<Product>($"/api/products/{ProductId}");

        if (httpResponse.Error)
        {
            loading = false;
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        product = httpResponse.Response!;
        productDTO = ToProductDTO(product);
        loading = false;
    }

    private ProductDTO ToProductDTO(Product product)
    {
        return new ProductDTO
            {
                Description = product.Description,
                Id = product.Id,
                Name = product.Name,
                Price = product.Price,
                Stock = product.Stock,
                ProductCategoryIds = product.ProductCategories!.Select(x => x.CategoryId).ToList(),
                ProductSubCategoryIds = product.ProductSubCategories!.Select(x => x.SubCategoryId).ToList(),
                ProductImages = product.ProductImages!.Select(x => Convert.ToBase64String(x.Imagefile)).ToList()
            };
    }

    private async Task LoadCategoriesAsync()
    {
        loading = true;
        var httpResponse = await repository.Get<List<Category>>("/api/categories");

        if (httpResponse.Error)
        {
            loading = false;
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        var categories = httpResponse.Response!;
        foreach (var category in categories!)
        {
            var found = product!.ProductCategories!.FirstOrDefault(x => x.CategoryId == category.Id);
            if (found == null)
            {
                nonSelectedCategories.Add(category);
            }
            else
            {
                selectedCategories.Add(category);
            }
        }
        loading = false;
    }

    private async Task LoadSubCategoriesAsync()
    {
        loading = true;
        var httpResponse = await repository.Get<List<SubCategory>>("/api/subcategories");

        if (httpResponse.Error)
        {
            loading = false;
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        var subCategories = httpResponse.Response!;
        foreach (var subCategory in subCategories!)
        {
            var found = product!.ProductSubCategories!.FirstOrDefault(x => x.SubCategoryId == subCategory.Id);
            if (found == null)
            {
                nonSelectedSubCategories.Add(subCategory);
            }
            else
            {
                selectedSubCategories.Add(subCategory);
            }
        }
        loading = false;
    }

    private async Task SaveChangesAsync()
    {
        // Obtener las subcategorías seleccionadas del ProductForm
        if (productDTO.ProductSubCategoryIds != null && productDTO.ProductSubCategoryIds.Any())
        {
            // Cargar todas las subcategorías para obtener sus CategoryId
            var allSubCategories = selectedSubCategories.Concat(nonSelectedSubCategories).ToList();

            // Obtener las categorías padre de las subcategorías seleccionadas
            var categoryIds = allSubCategories
                .Where(sc => productDTO.ProductSubCategoryIds.Contains(sc.Id))
                .Select(sc => sc.CategoryId)
                .Distinct()
                .ToList();

            // Asignar las categorías automáticamente
            productDTO.ProductCategoryIds = categoryIds;
        }

        var httpResponse = await repository.Put("/api/products", productDTO);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        Return();
    }

    private void Return()
    {
        productForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/products");
    }
}
