@page "/products/create"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

@if (loading)
{
    <div class="spinner" />
}
else
{
    <ProductForm @ref="productForm" ProductDTO="productDTO" NonSelectedCategories="nonSelectedCategories" OnValidSubmit="CreateAsync" ReturnAction="Return" />
}
 

@code {
    private ProductDTO productDTO = new ProductDTO
        {
            ProductCategoryIds = new List<int>(),
            ProductImages = new List<string>()
        };

    private ProductForm? productForm;
    private List<Category> selectedCategories = new();
    private List<Category> nonSelectedCategories = new();
    private bool loading = true;

    protected async override Task OnAfterRenderAsync(bool render)
    {

        var httpResponse = await repository.Get<List<Category>>("/api/categories");


        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        nonSelectedCategories = httpResponse.Response!;
        loading = false;
        StateHasChanged();

    }

    private async Task CreateAsync()
    {
        var httpResponse = await repository.post("/api/products", productDTO);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await Return();
    }

    private async Task Return()
    {
        productForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/products");
       
        await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "Guardado Con Éxito",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = true,
            });
    }
}
