@page "/catalog/subcategory/{SubcategoryId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@using Fume.Web.Helpers
@layout MainLayout

<style>
    .breadcrumb-container {
        background: white;
        padding: 15px 0;
        margin-bottom: 30px;
        border-bottom: 1px solid #e0e0e0;
    }

    .breadcrumb-list {
        list-style: none;
        padding: 0;
        margin: 0;
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
        align-items: center;
    }

    .breadcrumb-item {
        display: inline-flex;
        align-items: center;
        font-size: 0.95rem;
    }

    .breadcrumb-item a {
        color: #25b09b;
        text-decoration: none;
        transition: color 0.3s ease;
    }

    .breadcrumb-item a:hover {
        color: #1b8e7f;
        text-decoration: underline;
    }

    .breadcrumb-item.active {
        color: #666;
        font-weight: 600;
    }

    .breadcrumb-separator {
        margin: 0 8px;
        color: #ddd;
    }

    .subcategory-header {
        background: linear-gradient(135deg, #1b70b3 0%, #25b09b 100%);
        padding: 40px 20px;
        margin-bottom: 40px;
        border-radius: 8px;
        color: white;
        display: flex;
        align-items: center;
        gap: 30px;
    }

    .subcategory-header-image {
        width: 150px;
        height: 150px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
        flex-shrink: 0;
    }

    .subcategory-header-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .subcategory-header-info h1 {
        font-size: 2.5rem;
        margin: 0 0 10px 0;
        font-weight: 700;
    }

    .subcategory-header-info p {
        font-size: 1rem;
        margin: 0;
        opacity: 0.95;
    }

    .section-header {
        margin-bottom: 30px;
    }

    .section-header h2 {
        font-size: 1.8rem;
        color: #2c3e50;
        margin: 0 0 20px 0;
        padding-bottom: 15px;
        border-bottom: 3px solid #25b09b;
        display: inline-block;
    }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 50px;
    }

    .product-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        border: 2px solid transparent;
        display: flex;
        flex-direction: column;
    }

    .product-card:hover {
        transform: translateY(-6px);
        box-shadow: 0 8px 20px rgba(37, 176, 155, 0.25);
        border-color: #25b09b;
    }

    .product-image-container {
        width: 100%;
        height: 200px;
        background: linear-gradient(135deg, #f5f5f5 0%, #e8e8e8 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
    }

    .product-image {
        width: 100%;
        height: 100%;
        object-fit: contain;
        padding: 10px;
        transition: transform 0.3s ease;
    }

    .product-card:hover .product-image {
        transform: scale(1.08);
    }

    .product-info {
        padding: 18px;
        display: flex;
        flex-direction: column;
        flex-grow: 1;
    }

    .product-name {
        font-size: 1.1rem;
        font-weight: 700;
        color: #2c3e50;
        margin: 0 0 10px 0;
        min-height: 2.2rem;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .product-description {
        font-size: 0.85rem;
        color: #999;
        margin: 0 0 10px 0;
        min-height: 40px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        flex-grow: 1;
    }

    .product-price {
        font-size: 1.4rem;
        font-weight: 700;
        color: #27ae60;
        margin: 12px 0;
    }

    .product-actions {
        display: flex;
        gap: 8px;
        margin-top: auto;
    }

    .details-button {
        flex: 1;
        background: white;
        color: #25b09b;
        border: 2px solid #25b09b;
        padding: 10px;
        border-radius: 6px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        text-align: center;
    }

    .details-button:hover {
        background: #f0f0f0;
    }

    .add-cart-button {
        flex: 1;
        background: linear-gradient(135deg, #25b09b 0%, #1b8e7f 100%);
        color: white;
        border: none;
        padding: 10px;
        border-radius: 6px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .add-cart-button:hover {
        background: linear-gradient(135deg, #1b8e7f 0%, #166a62 100%);
        transform: scale(1.02);
    }

    .loading-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 400px;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #25b09b;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #999;
    }

    .empty-state-icon {
        font-size: 4rem;
        margin-bottom: 20px;
        opacity: 0.5;
    }

    .back-button {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        background: white;
        color: #25b09b;
        border: 2px solid #25b09b;
        padding: 10px 20px;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
        text-decoration: none;
        margin-bottom: 20px;
    }

    .back-button:hover {
        background: #25b09b;
        color: white;
    }

    @@media (max-width: 768px) {
        .subcategory-header {
            flex-direction: column;
            text-align: center;
        }

        .subcategory-header-image {
            width: 120px;
            height: 120px;
        }

        .subcategory-header-info h1 {
            font-size: 1.8rem;
        }

        .products-grid {
            grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
            gap: 15px;
        }

        .product-actions {
            flex-direction: column;
        }

        .details-button, .add-cart-button {
            width: 100%;
        }
    }
</style>

<div class="container">
    <!-- Breadcrumb -->
    <div class="breadcrumb-container">
        <ul class="breadcrumb-list">
            <li class="breadcrumb-item">
                <a href="/catalog">Cat√°logo</a>
            </li>
            <li class="breadcrumb-separator">/</li>
            <li class="breadcrumb-item">
                <a href="/catalog/category/@Category?.CategoryId">@(Category?.Category?.Name ?? "Categor√≠a")</a>
            </li>
            <li class="breadcrumb-separator">/</li>
            <li class="breadcrumb-item active">
                @(Category?.Name ?? "Cargando...")
            </li>
        </ul>
    </div>

    <button class="back-button" @onclick="GoBackAsync">
        ‚Üê Volver a Categor√≠a
    </button>

    @if (Category is null)
    {
        <div class="loading-container">
            <div class="spinner"></div>
        </div>
    }
    else
    {
        <!-- Subcategory Header -->
        <div class="subcategory-header">
            <div class="subcategory-header-image">
                @if (Category.Image != null && Category.Image.Length > 0)
                {
                    <img src="data:image/png;base64,@Category.ImageString" alt="@Category.Name" />
                }
                else
                {
                    <div style="text-align: center; color: rgba(255,255,255,0.3); font-size: 3rem;">
                        üìÇ
                    </div>
                }
            </div>
            <div class="subcategory-header-info">
                <h1>@Category.Name</h1>
                <p>
                    @if (Category.ProductSubCategoriesNumber > 0)
                    {
                        <span>@Category.ProductSubCategoriesNumber productos disponibles</span>
                    }
                    else
                    {
                        <span>Sin productos disponibles</span>
                    }
                </p>
            </div>
        </div>

        <!-- Products Section -->
        @if (Products != null && Products.Any())
        {
            <div class="section-header">
                <h2>Productos</h2>
            </div>

            <div class="products-grid">
                @foreach (var product in Products)
                {
                    <div class="product-card">
                        <div class="product-image-container">
                            @if (product.ProductImages != null && product.ProductImages.Any())
                            {
                                var firstImage = Convert.ToBase64String(product.ProductImages.First().Imagefile);
                                <img src="data:image/png;base64,@firstImage" alt="@product.Name" class="product-image" />
                            }
                            else
                            {
                                <div style="text-align: center; color: #ccc; font-size: 2.5rem;">
                                    üì¶
                                </div>
                            }
                        </div>
                        <div class="product-info">
                            <h3 class="product-name">@product.Name</h3>
                            <p class="product-description">@product.Description</p>
                            <div class="product-price">@FormatHelper.FormatPrice(product.Price)</div>
                            <div class="product-actions">
                                <a href="/orders/details/@product.Id" class="details-button">
                                    ‚ÑπÔ∏è Detalles
                                </a>
                                <button class="add-cart-button" @onclick="() => AddToCartAsync(product.Id)">
                                    üõí Carrito
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-state-icon">üõçÔ∏è</div>
                <h3>Esta subcategor√≠a no tiene productos</h3>
                <p>Por favor, selecciona otra subcategor√≠a</p>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public int SubcategoryId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

    private SubCategory? Category { get; set; }
    private List<Product>? Products { get; set; }
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        await CheckIsAuthenticatedAsync();
        await LoadSubcategoryAndProductsAsync();
    }

    private async Task CheckIsAuthenticatedAsync()
    {
        var authenticationState = await authenticationStateTask;
        isAuthenticated = authenticationState.User.Identity!.IsAuthenticated;
    }

    private async Task LoadSubcategoryAndProductsAsync()
    {
        try
        {
            // Load subcategory with full details including category info
            var response = await repository.Get<SubCategory>($"/api/subcategories/{SubcategoryId}");
            if (!response.Error)
            {
                Category = response.Response;
            }
            else
            {
                await sweetAlertService.FireAsync("Error", "No se pudo cargar la subcategor√≠a", SweetAlertIcon.Error);
                navigationManager.NavigateTo("/catalog");
                return;
            }

            // Load products for this subcategory
            // This assumes you have an endpoint that filters products by subcategory
            var productsResponse = await repository.Get<List<Product>>($"/api/products/subcategory/{SubcategoryId}");
            if (!productsResponse.Error)
            {
                Products = productsResponse.Response ?? new List<Product>();
            }
            else
            {
                // If the specific endpoint doesn't exist, try to filter from all products
                var allProductsResponse = await repository.Get<List<Product>>("/api/products?RecordsNumber=1000");
                if (!allProductsResponse.Error && allProductsResponse.Response != null)
                {
                    Products = allProductsResponse.Response
                        .Where(p => p.ProductSubCategories != null &&
                                    p.ProductSubCategories.Any(ps => ps.SubCategoryId == SubcategoryId))
                        .ToList();
                }
                else
                {
                    Products = new List<Product>();
                }
            }
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
            navigationManager.NavigateTo("/catalog");
        }
    }

    private void GoBackAsync()
    {
        navigationManager.NavigateTo($"/catalog/category/{Category?.CategoryId}");
    }

    private async Task AddToCartAsync(int productId)
    {
        if (!isAuthenticated)
        {
            navigationManager.NavigateTo("/Login");
            var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = false,
                Timer = 5000
            });
            await toast.FireAsync(icon: SweetAlertIcon.Error, message: "Debes iniciar sesi√≥n para agregar productos al carrito.");
            return;
        }

        try
        {
            // TODO: Implement add to cart functionality
            var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = false,
                Timer = 5000
            });
            await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Producto agregado al carrito.");
        }
        catch (Exception ex)
        {
            var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = false,
                Timer = 5000
            });
            await toast.FireAsync(icon: SweetAlertIcon.Error, message: "Error: " + ex.Message);
        }
    }
}
