@page "/orders/details/{ProductId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@using Fume.Web.Helpers
@layout MainLayout

<style>
    .breadcrumb-container {
        background: white;
        padding: 15px 0;
        margin-bottom: 30px;
        border-bottom: 1px solid #e0e0e0;
    }

    .breadcrumb-list {
        list-style: none;
        padding: 0;
        margin: 0;
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
        align-items: center;
    }

    .breadcrumb-item {
        display: inline-flex;
        align-items: center;
        font-size: 0.95rem;
    }

    .breadcrumb-item a {
        color: #25b09b;
        text-decoration: none;
        transition: color 0.3s ease;
    }

    .breadcrumb-item a:hover {
        color: #1b8e7f;
        text-decoration: underline;
    }

    .breadcrumb-item.active {
        color: #666;
        font-weight: 600;
    }

    .breadcrumb-separator {
        margin: 0 8px;
        color: #ddd;
    }

    .product-details-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 40px;
        margin-bottom: 50px;
        background: white;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .product-images-section {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .main-image {
        width: 100%;
        height: 400px;
        background: linear-gradient(135deg, #f5f5f5 0%, #e8e8e8 100%);
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
    }

    .main-image img {
        width: 100%;
        height: 100%;
        object-fit: contain;
        padding: 20px;
    }

    .thumbnail-images {
        display: flex;
        gap: 10px;
        overflow-x: auto;
    }

    .thumbnail {
        width: 80px;
        height: 80px;
        background: #f5f5f5;
        border: 2px solid #e0e0e0;
        border-radius: 6px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
        transition: all 0.3s ease;
        flex-shrink: 0;
    }

    .thumbnail:hover,
    .thumbnail.active {
        border-color: #25b09b;
        box-shadow: 0 2px 8px rgba(37, 176, 155, 0.3);
    }

    .thumbnail img {
        width: 100%;
        height: 100%;
        object-fit: contain;
        padding: 5px;
    }

    .product-info-section {
        display: flex;
        flex-direction: column;
        gap: 25px;
    }

    .back-button {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        background: white;
        color: #25b09b;
        border: 2px solid #25b09b;
        padding: 10px 20px;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
        text-decoration: none;
        width: fit-content;
        margin-bottom: 20px;
    }

    .back-button:hover {
        background: #25b09b;
        color: white;
    }

    .product-name {
        font-size: 2rem;
        font-weight: 700;
        color: #2c3e50;
        margin: 0;
    }

    .product-rating {
        display: flex;
        align-items: center;
        gap: 10px;
        color: #999;
    }

    .rating-stars {
        color: #ffc107;
    }

    .product-price-section {
        border-top: 1px solid #e0e0e0;
        border-bottom: 1px solid #e0e0e0;
        padding: 20px 0;
    }

    .product-price {
        font-size: 2.5rem;
        font-weight: 700;
        color: #27ae60;
        margin: 0 0 10px 0;
    }

    .price-info {
        font-size: 0.9rem;
        color: #999;
    }

    .stock-status {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 15px;
        border-radius: 6px;
        margin: 20px 0;
    }

    .stock-status.in-stock {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .stock-status.low-stock {
        background: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
    }

    .stock-status.out-of-stock {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .product-description {
        font-size: 1rem;
        color: #666;
        line-height: 1.6;
        margin: 20px 0;
    }

    .quantity-selector {
        display: flex;
        align-items: center;
        gap: 15px;
        margin: 20px 0;
    }

    .quantity-selector label {
        font-weight: 600;
        color: #2c3e50;
    }

    .quantity-input {
        display: flex;
        align-items: center;
        border: 2px solid #e0e0e0;
        border-radius: 6px;
        width: fit-content;
    }

    .quantity-input button {
        background: none;
        border: none;
        padding: 8px 12px;
        cursor: pointer;
        font-size: 1.2rem;
        color: #25b09b;
        transition: background 0.3s ease;
    }

    .quantity-input button:hover {
        background: #f5f5f5;
    }

    .quantity-input input {
        border: none;
        width: 60px;
        text-align: center;
        font-size: 1rem;
        font-weight: 600;
        padding: 8px 0;
    }

    .quantity-input input:focus {
        outline: none;
    }

    .action-buttons {
        display: flex;
        gap: 15px;
        margin: 30px 0;
    }

    .add-to-cart-btn {
        flex: 1;
        background: linear-gradient(135deg, #25b09b 0%, #1b8e7f 100%);
        color: white;
        border: none;
        padding: 16px 30px;
        border-radius: 8px;
        font-size: 1.1rem;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

    .add-to-cart-btn:hover {
        background: linear-gradient(135deg, #1b8e7f 0%, #166a62 100%);
        transform: scale(1.02);
        box-shadow: 0 4px 12px rgba(37, 176, 155, 0.3);
    }

    .add-to-cart-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        transform: scale(1);
    }

    .wishlist-btn {
        padding: 16px 30px;
        background: white;
        color: #25b09b;
        border: 2px solid #25b09b;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 700;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

    .wishlist-btn:hover {
        background: #f0f8f7;
    }

    .product-features {
        background: #f9f9f9;
        padding: 20px;
        border-radius: 8px;
        margin: 20px 0;
    }

    .feature-item {
        display: flex;
        gap: 15px;
        margin-bottom: 15px;
        padding-bottom: 15px;
        border-bottom: 1px solid #e0e0e0;
    }

    .feature-item:last-child {
        margin-bottom: 0;
        padding-bottom: 0;
        border-bottom: none;
    }

    .feature-icon {
        font-size: 1.5rem;
        flex-shrink: 0;
    }

    .feature-content {
        flex: 1;
    }

    .feature-label {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 5px;
    }

    .feature-value {
        color: #666;
        font-size: 0.95rem;
    }

    .loading-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 500px;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #25b09b;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .error-message {
        background: #f8d7da;
        color: #721c24;
        padding: 20px;
        border-radius: 8px;
        margin: 20px 0;
        text-align: center;
    }

    @@media (max-width: 768px) {
        .product-details-container {
            grid-template-columns: 1fr;
            gap: 30px;
            padding: 20px;
        }

        .product-name {
            font-size: 1.5rem;
        }

        .product-price {
            font-size: 2rem;
        }

        .action-buttons {
            flex-direction: column;
        }

        .main-image {
            height: 300px;
        }
    }
</style>

<div class="container">
    <!-- Breadcrumb -->
    <div class="breadcrumb-container">
        <ul class="breadcrumb-list">
            <li class="breadcrumb-item">
                <a href="/">Inicio</a>
            </li>
            <li class="breadcrumb-separator">/</li>
            <li class="breadcrumb-item">
                <a href="/catalog">Catálogo</a>
            </li>
            <li class="breadcrumb-separator">/</li>
            <li class="breadcrumb-item active">
                @(Product?.Name ?? "Producto")
            </li>
        </ul>
    </div>

    <button class="back-button" @onclick="GoBack">
        ← Volver
    </button>

    @if (Product is null)
    {
        <div class="loading-container">
            <div class="spinner"></div>
        </div>
    }
    else
    {
        <div class="product-details-container">
            <!-- Images Section -->
            <div class="product-images-section">
                <div class="main-image">
                    @if (SelectedImage != null)
                    {
                        <img src="data:image/png;base64,@SelectedImage" alt="@Product.Name" />
                    }
                    else if (Product.ProductImages != null && Product.ProductImages.Any())
                    {
                        var firstImage = Convert.ToBase64String(Product.ProductImages.First().Imagefile);
                        <img src="data:image/png;base64,@firstImage" alt="@Product.Name" />
                    }
                    else
                    {
                        <div style="text-align: center; color: #ccc; font-size: 4rem;">
                            📦
                        </div>
                    }
                </div>

                @if (Product.ProductImages != null && Product.ProductImages.Any())
                {
                    <div class="thumbnail-images">
                        @foreach (var image in Product.ProductImages)
                        {
                            var imageBase64 = Convert.ToBase64String(image.Imagefile);
                            <div class="thumbnail @(imageBase64 == SelectedImage ? "active" : "")"
                                 @onclick="() => SelectImage(imageBase64)">
                                <img src="data:image/png;base64,@imageBase64" alt="Thumbnail" />
                            </div>
                        }
                    </div>
                }
            </div>

            <!-- Product Info Section -->
            <div class="product-info-section">
                <div>
                    <h1 class="product-name">@Product.Name</h1>
                    <div class="product-rating">
                        <span class="rating-stars">★★★★★ (125 reseñas)</span>
                    </div>
                </div>

                <div class="product-price-section">
                    <div class="product-price">@FormatHelper.FormatPrice(Product.Price)</div>
                    <div class="price-info">Precio incluye IVA</div>
                </div>

                <!-- Stock Status -->
                @if (Product.Stock > 0)
                {
                    @if (Product.Stock > 10)
                    {
                        <div class="stock-status in-stock">
                            <span>✓</span>
                            <span>En stock (@Product.Stock unidades disponibles)</span>
                        </div>
                    }
                    else
                    {
                        <div class="stock-status low-stock">
                            <span>⚠</span>
                            <span>Stock bajo (@Product.Stock unidades disponibles)</span>
                        </div>
                    }
                }
                else
                {
                    <div class="stock-status out-of-stock">
                        <span>✗</span>
                        <span>Agotado</span>
                    </div>
                }

                <!-- Description -->
                <div class="product-description">
                    @Product.Description
                </div>

                <!-- Quantity Selector -->
                <div class="quantity-selector">
                    <label>Cantidad:</label>
                    <div class="quantity-input">
                        <button @onclick="() => DecreaseQuantity()" @disabled="Quantity <= 1">−</button>
                        <input type="number" @bind="Quantity" min="1" max="@Product.Stock" />
                        <button @onclick="() => IncreaseQuantity()" @disabled="Quantity >= Product.Stock">+</button>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="action-buttons">
                    <button class="add-to-cart-btn"
                            @onclick="AddToCartAsync"
                            @disabled="Product.Stock <= 0 || isLoading">
                        @if (isLoading)
                        {
                            <span>Procesando...</span>
                        }
                        else
                        {
                            <span>🛒</span>
                            <span>Agregar al Carrito</span>
                        }
                    </button>
                    <button class="wishlist-btn" @onclick="AddToWishlist">
                        <span>♡</span>
                        <span>Guardar</span>
                    </button>
                </div>

                <!-- Product Features -->
                <div class="product-features">
                    <div class="feature-item">
                        <div class="feature-icon">📦</div>
                        <div class="feature-content">
                            <div class="feature-label">Envío</div>
                            <div class="feature-value">Envío gratis en compras mayores a $100</div>
                        </div>
                    </div>
                    <div class="feature-item">
                        <div class="feature-icon">🔄</div>
                        <div class="feature-content">
                            <div class="feature-label">Devoluciones</div>
                            <div class="feature-value">30 días para devolver sin preguntas</div>
                        </div>
                    </div>
                    <div class="feature-item">
                        <div class="feature-icon">🛡️</div>
                        <div class="feature-content">
                            <div class="feature-label">Garantía</div>
                            <div class="feature-value">Garantía del fabricante de 1 año</div>
                        </div>
                    </div>
                    <div class="feature-item">
                        <div class="feature-icon">💳</div>
                        <div class="feature-content">
                            <div class="feature-label">Pagos</div>
                            <div class="feature-value">Múltiples formas de pago disponibles</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int ProductId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

    private Product? Product { get; set; }
    private string? SelectedImage { get; set; }
    private int Quantity { get; set; } = 1;
    private bool isLoading = false;
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckIsAuthenticatedAsync();
        await LoadProductAsync();
    }

    private async Task CheckIsAuthenticatedAsync()
    {
        var authenticationState = await authenticationStateTask;
        isAuthenticated = authenticationState.User.Identity!.IsAuthenticated;
    }

    private async Task LoadProductAsync()
    {
        try
        {
            var response = await repository.Get<Product>($"/api/products/{ProductId}");
            if (!response.Error)
            {
                Product = response.Response;
                // Set the first image as selected
                if (Product?.ProductImages != null && Product.ProductImages.Any())
                {
                    SelectedImage = Convert.ToBase64String(Product.ProductImages.First().Imagefile);
                }
            }
            else
            {
                await sweetAlertService.FireAsync("Error", "No se pudo cargar el producto", SweetAlertIcon.Error);
                navigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
            navigationManager.NavigateTo("/");
        }
    }

    private void SelectImage(string imageBase64)
    {
        SelectedImage = imageBase64;
    }

    private void IncreaseQuantity()
    {
        if (Product != null && Quantity < Product.Stock)
        {
            Quantity++;
        }
    }

    private void DecreaseQuantity()
    {
        if (Quantity > 1)
        {
            Quantity--;
        }
    }

    private async Task AddToCartAsync()
    {
        if (!isAuthenticated)
        {
            navigationManager.NavigateTo("/Login");
            var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = false,
                Timer = 5000
            });
            await toast.FireAsync(icon: SweetAlertIcon.Error, message: "Debes iniciar sesión para agregar productos al carrito.");
            return;
        }

        isLoading = true;

        try
        {
            // TODO: Implement actual add to cart API call
            // For now, just show success message
            var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = false,
                Timer = 3000
            });
            await toast.FireAsync(icon: SweetAlertIcon.Success, message: $"{Quantity} unidad(es) agregada(s) al carrito.");
        }
        catch (Exception ex)
        {
            var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = false,
                Timer = 5000
            });
            await toast.FireAsync(icon: SweetAlertIcon.Error, message: "Error: " + ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void AddToWishlist()
    {
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
        {
            Toast = true,
            Position = SweetAlertPosition.TopEnd,
            ShowConfirmButton = false,
            Timer = 3000
        });
        toast.FireAsync(icon: SweetAlertIcon.Info, message: "Producto guardado en tu lista de deseos");
    }

    private void GoBack()
    {
        navigationManager.NavigateTo("/");
    }
}
