@page "/categories"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@inject IJSRuntime JS
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Components.Web

<style>
    .dialog-backdrop-blur {
        backdrop-filter: blur(8px);
        background-color: rgba(0, 0, 0, 0.5) !important;
    }

    .categories-header {
        background: linear-gradient(135deg, #2196f3 0%, #eee 100%);
        padding: 32px;
        border-radius: 16px;
        margin-bottom: 30px;
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.25);
    }

    .categories-title {
        color: white;
        font-size: 2rem;
        font-weight: 700;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 15px;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .action-buttons-group {
        animation: slideInRight 0.4s ease-out;
    }

    @@keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    .mud-button-root:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.2) !important;
        transition: all 0.3s ease;
    }

    .mud-button-group-root .mud-button-root:first-child {
        border-top-left-radius: 12px !important;
        border-bottom-left-radius: 12px !important;
    }

    .mud-button-group-root .mud-button-root:last-child {
        border-top-right-radius: 12px !important;
        border-bottom-right-radius: 12px !important;
    }

    @@media (max-width: 768px) {
        .categories-header {
            padding: 20px;
        }

        .categories-title {
            font-size: 1.5rem;
        }

        .action-buttons-group {
            width: 100%;
        }

        .mud-button-group-root {
            width: 100%;
            display: flex;
            flex-direction: column;
        }

        .mud-button-group-root .mud-button-root {
            width: 100%;
            border-radius: 12px !important;
            margin-bottom: 8px;
        }
    }

    .search-card {
        background: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        margin-bottom: 25px;
    }

    .category-card {
        background: white;
        border-radius: 12px;
        border: 1px solid #e3f2fd;
        transition: all 0.3s ease;
        margin-bottom: 15px;
        overflow: hidden;
    }

    .category-card:hover {
        box-shadow: 0 8px 24px rgba(102, 126, 234, 0.15);
        transform: translateY(-3px);
        border-color: #667eea;
    }

    .category-name {
        font-size: 1.1rem;
        font-weight: 500;
        color: #2c3e50;
        padding: 20px;
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .category-icon {
        width: 45px;
        height: 45px;
        background: linear-gradient(135deg, #2196f3 0%, #fff 100%);
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.2rem;
    }

    .category-actions {
        padding: 15px 20px;
        background: #f8f9fa;
        border-top: 1px solid #e3f2fd;
        display: flex;
        gap: 10px;
        justify-content: flex-end;
    }

    .stats-badge {
        background: #e3f2fd;
        color: #1976d2;
        padding: 4px 12px;
        border-radius: 12px;
        font-size: 0.85rem;
        font-weight: 500;
    }

    .modal-header-gradient {
        background: linear-gradient(135deg, #2196f3 0%, #e0e0e0 100%) !important color: white !important;
    }
</style>

@if (categories is null)
{
    <div class="spinner" />
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
        <!-- Header -->
        <div class="categories-header">
            <div class="d-flex justify-content-between align-items-center flex-wrap" style="gap: 16px;">
                <h1 class="categories-title mb-0">
                    <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Large" />
                    Gestión de Categorías
                </h1>
                <div class="action-buttons-group">
                    <MudButtonGroup Variant="Variant.Filled"
                                    Size="Size.Large"
                                    Style="box-shadow: 0 4px 12px rgba(0,0,0,0.15); border-radius: 12px;">
                        <MudButton StartIcon="@Icons.Material.Filled.Add"
                                   OnClick="@(() => ShowModal())"
                                   Style="background: white;
                                              color: #0d6efd;
                                          font-weight: 600;
                                          padding: 12px 24px;
                                          text-transform: none;
                                          font-size: 1rem;">
                            Nueva Categoría
                        </MudButton>
                        <MudButton StartIcon="@Icons.Material.Filled.AddCircle"
                                   OnClick="@(() => ShowSubCategoryModal())"
                                   Style="background: #2196F3;
                                          color: white;
                                          font-weight: 600;
                                          padding: 12px 24px;
                                          text-transform: none;
                                          font-size: 1rem;">
                            Nueva Subcategoría
                        </MudButton>
                    </MudButtonGroup>
                </div>
            </div>
        </div>

        <!-- Search Section -->
        <div class="search-card">
            <MudGrid Spacing="3" Justify="Justify.SpaceBetween">
                <MudItem xs="12" md="8">
                    <MudTextField @bind-Value="Filter"
                                  Label="Buscar categorías"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  FullWidth="true"
                                  OnKeyUp="HandleKeyPress"
                                  Placeholder="Ingrese el nombre de la categoría..." />
                </MudItem>
                <MudItem xs="12" md="4" Class="d-flex align-items-center gap-2">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Info"
                               StartIcon="@Icons.Material.Filled.FilterList"
                               FullWidth="true"
                               OnClick="ApplyFilterAsync">
                        Filtrar
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Error"
                               StartIcon="@Icons.Material.Filled.Clear"
                               FullWidth="true"
                               OnClick="CleanFilterAsync">
                        Limpiar
                    </MudButton>
                </MudItem>
            </MudGrid>
        </div>

        <!-- Categories Grid -->
        <MudGrid>
            @foreach (var category in categories)
            {
                <MudItem xs="12" md="6" lg="4">
                    <div class="category-card">
                        <div class="category-name">
                            @if (category.Image != null && category.Image.Length > 0)
                            {
                                <img src="data:image/png;base64,@category.ImageString"
                                     style="width: 45px; height: 45px; border-radius: 10px; object-fit: cover;"
                                     alt="@category.Name" />
                            }
                            else
                            {
                                <div class="category-icon">
                                    <MudIcon Icon="@Icons.Material.Filled.Label" />
                                </div>
                            }
                            <div style="flex: 1;">
                                <div>@category.Name</div>
                                <span class="stats-badge">@category.ProductCategoriesNumber Productos</span>
                            </div>
                        </div>
                        <div class="category-actions">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Warning"
                                       StartIcon="@Icons.Material.Filled.Edit"
                                       Size="Size.Small"
                                       OnClick="@(() => ShowModal(category.Id, true))">
                                Editar
                            </MudButton>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       Size="Size.Small"
                                       OnClick="@(() => Delete(category.Id))">
                                Eliminar
                            </MudButton>
                        </div>
                    </div>
                </MudItem>
            }
        </MudGrid>

        <!-- Modal Crear Categoría -->
        <Modal @ref="modalCreate"
               Title="Nueva Categoría"
               IsVerticallyCentered="true"
               Size="BlazorBootstrap.ModalSize.ExtraLarge"
               HeaderCssClass="modal-header-gradient">
            <BodyTemplate>
                <CategoryCreate @ref="categoryCreateRef" />
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Secondary" @onclick="OnHideCreateModalClick">
                    <i class="oi oi-x"></i> Cancelar
                </Button>
                <Button Color="ButtonColor.Primary" @onclick="OnSaveClick">
                    <i class="oi oi-check"></i> Guardar Categoría
                </Button>
            </FooterTemplate>
        </Modal>

        <!-- Modal Editar Categoría -->
        <Modal @ref="modalEdit"
               Title="Editar Categoría"
               IsVerticallyCentered="true"
               Size="BlazorBootstrap.ModalSize.ExtraLarge"
               HeaderCssClass="modal-header-gradient">
            <BodyTemplate>
                <CategoryEdit @ref="categoryEditRef" CategoryId="@selectedCategoryId" />
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Secondary" @onclick="OnHideEditModalClick">
                    <i class="oi oi-x"></i> Cancelar
                </Button>
                <Button Color="ButtonColor.Primary" @onclick="OnUpdateClick">
                    <i class="oi oi-check"></i> Actualizar Categoría
                </Button>
            </FooterTemplate>
        </Modal>

        <!-- Modal Crear Subcategoría -->
        <Modal @ref="modalSubCategory"
               Title="Nueva Subcategoría"
               IsVerticallyCentered="true"
               Size="BlazorBootstrap.ModalSize.ExtraLarge"
               HeaderCssClass="modal-header-gradient">
            <BodyTemplate>
                <SubCategoryCreate @ref="subCategoryCreateRef" />
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Secondary" @onclick="OnHideSubCategoryModalClick">
                    <i class="oi oi-x"></i> Cancelar
                </Button>
                <Button Color="ButtonColor.Success" @onclick="OnSaveSubCategoryClick">
                    <i class="oi oi-check"></i> Guardar Subcategoría
                </Button>
            </FooterTemplate>
        </Modal>

    </MudContainer>
}

@code {
    public List<Category>? categories { get; set; }
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    private Modal modalCreate = default!;
    private Modal modalEdit = default!;
    private Modal modalSubCategory = default!;
    private CategoryCreate categoryCreateRef = default!;
    private CategoryEdit categoryEditRef = default!;
    private SubCategoryCreate subCategoryCreateRef = default!;
    private int selectedCategoryId = 0;

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task OnHideCreateModalClick()
    {
        await modalCreate?.HideAsync();
        await LoadAsync();
    }

    private async Task OnHideEditModalClick()
    {
        await modalEdit?.HideAsync();
        await LoadAsync();
    }

    private async Task OnHideSubCategoryModalClick()
    {
        await modalSubCategory?.HideAsync();
        await LoadAsync();
    }

    private async Task OnSaveClick()
    {
        if (categoryCreateRef != null)
        {
            await categoryCreateRef.CreateAsync();
        }

        await sweetAlertService.FireAsync("Éxito", "Categoría creada exitosamente", SweetAlertIcon.Success);
        await OnHideCreateModalClick();
    }

    private async Task OnUpdateClick()
    {
        if (categoryEditRef != null)
        {
            await categoryEditRef.EditAsync();
        }
        await OnHideEditModalClick();
    }

    private async Task OnSaveSubCategoryClick()
    {
        if (subCategoryCreateRef != null)
        {
            await subCategoryCreateRef.CreateAsync();
        }
        await OnHideSubCategoryModalClick();
    }

    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        if (isEdit)
        {
            selectedCategoryId = id;
            await modalEdit?.ShowAsync();
        }
        else
        {
            await modalCreate?.ShowAsync();
        }
    }

    private async Task ShowSubCategoryModal()
    {
        await modalSubCategory?.ShowAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/categories?page={page}";
            url2 = $"api/categories/totalPages";
        }
        else
        {
            url1 = $"api/categories?page={page}&filter={Filter}";
            url2 = $"api/categories/totalPages?filter={Filter}";
        }

        try
        {
            var responseHppt = await repository.Get<List<Category>>(url1);
            var responseHppt2 = await repository.Get<int>(url2);
            categories = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Delete(int categoryId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/categories/{categoryId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            var toast2 = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = false,
                Timer = 5000
            });
            await toast2.FireAsync(icon: SweetAlertIcon.Success, message: "Eliminada correctamente!");
            await LoadAsync();
        }
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ApplyFilterAsync();
        }
    }
}
