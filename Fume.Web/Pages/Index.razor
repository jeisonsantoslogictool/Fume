@page "/"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@using Microsoft.AspNetCore.Components.Web
@inherits LayoutComponentBase
@layout MainLayout
@using MudBlazor
<style type="text/css">
    /* Header Section */
    .header-section {
        background-color: #fff;
        padding: 20px 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }

    .header-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .logo-section img {
        height: 60px;
        cursor: pointer;
    }

    .search-section {
        flex-grow: 1;
        max-width: 600px;
        margin: 0 40px;
    }

    .smart-search {
        position: relative;
        width: 100%;
    }

    .smart-search input {
        width: 100%;
        padding: 12px 50px 12px 20px;
        border: 2px solid #e0e0e0;
        border-radius: 25px;
        font-size: 16px;
        transition: all 0.3s ease;
    }

    .smart-search input:focus {
        outline: none;
        border-color: #25b09b;
        box-shadow: 0 0 10px rgba(37, 176, 155, 0.2);
    }

    .smart-search button {
        position: absolute;
        right: 5px;
        top: 50%;
        transform: translateY(-50%);
            background-color: #1b70b3;
        border: none;
        border-radius: 20px;
        padding: 8px 20px;
        color: white;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .smart-search button:hover {
        background-color: #1e9382;
    }

    .cart-section {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    /* Banner Section */
    .banner-section {
        width: 100%;
        height: 400px;
        background-image: url('/Fullfondo.png');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        margin-bottom: 40px;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .banner-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.3);
    }

    .banner-content {
        position: relative;
        z-index: 1;
        text-align: center;
        color: white;
    }

    .banner-content h1 {
        font-size: 3rem;
        font-weight: bold;
        margin-bottom: 20px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    }

    .banner-content p {
        font-size: 1.5rem;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
    }

    /* Product Cards */
    .card {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        border: 1px solid #e0e0e0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border-radius: 8px;
        font-family: sans-serif;
        margin: 10px;
        transition: all 0.3s ease;
        overflow: hidden;
    }

    .card:hover {
        box-shadow: 0 4px 16px rgba(0,0,0,0.15);
        transform: translateY(-5px);
    }

    .zoom {
        overflow: hidden;
        background-color: #f8f9fa;
        height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .zoom img {
        transition: transform 0.3s ease;
        object-fit: contain;
    }

    .card:hover .zoom img {
        transform: scale(1.1);
    }

    .card-title {
        font-size: 1rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 8px;
        min-height: 48px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .card-text {
        font-size: 0.85rem;
        color: #6c757d;
        min-height: 40px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .card-body {
        padding: 15px;
    }

    .card-footer {
        background-color: #fff;
        border-top: 1px solid #e0e0e0;
        padding: 15px;
    }

    .price-tag {
        font-size: 1.5rem;
        font-weight: bold;
        color: #27ae60;
        margin: 10px 0;
    }

    @@media (max-width: 768px) {
        .header-container {
            flex-direction: column;
            gap: 15px;
        }

        .search-section {
            margin: 0;
            width: 100%;
        }

        .banner-section {
            height: 250px;
        }

        .banner-content h1 {
            font-size: 2rem;
        }

        .banner-content p {
            font-size: 1rem;
        }
    }
</style>

<!-- Header Section -->
<div class="header-section">
    <div class="header-container">
        <div class="logo-section">
            <img src="/Logo.png" alt="Fume Logo" @onclick="@(() => navigationManager.NavigateTo("/"))" />
        </div>

        <div class="search-section">
            <div class="smart-search">
                <input type="text"
                       placeholder="Buscar productos, marcas o categorías..."
                       @bind-value="Filter"
                       @onkeyup="HandleKeyPress" />
                <button @onclick="ApplyFilterAsync">
                    <i class="oi oi-magnifying-glass"></i> Buscar
                </button>
            </div>
        </div>

        <div class="cart-section">
            <AuthorizeView>
                <Authorized>
                    @if (counter > 0)
                    {
                        <a href="/Orders/ShowCart" class="btn btn-primary">
                            <i class="oi oi-cart"></i> Carrito (@counter)
                        </a>
                    }
                    else
                    {
                        <a href="/Orders/ShowCart" class="btn btn-outline-primary">
                            <i class="oi oi-cart"></i> Carrito
                        </a>
                    }
                </Authorized>
                <NotAuthorized>
                    <button class="btn btn-outline-primary" @onclick="@(() => navigationManager.NavigateTo("/Login"))">
                        <i class="oi oi-account-login"></i> Iniciar Sesión
                    </button>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</div>

<!-- Banner Section -->
<div class="banner-section">
    <div class="banner-overlay"></div>
    <div class="banner-content">
        <h1>Bienvenido a IT Plus</h1>
        <p>Encuentra los mejores productos al mejor precio</p>
    </div>
</div>

@if (Products is null)
{
    <div class="spinner" />
}
else
{
    <div class="container">
        <div class="mb-3 d-flex justify-content-between align-items-center">
            <h2>Nuestros Productos</h2>
            @if (!string.IsNullOrEmpty(Filter))
            {
                <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">
                    <i class="oi oi-x" /> Limpiar búsqueda
                </button>
            }
        </div>

        <Pagination CurrentPage="currentPage"
                    TotalPages="totalPages"
                    SelectedPage="SelectedPageAsync" />

    <div class="row row-cols-1 row-cols-md-4 g-4 mt-1">
        @foreach (var product in Products!)
        {
            <div class="col">
                <div class="card h-100">
                    <div class="text-center zoom">
                        @if (product.ProductImages != null && product.ProductImages.Any())
                        {
                            var firstImage = Convert.ToBase64String(product.ProductImages.First().Imagefile);
                            <img src="data:image/png;base64,@firstImage" style="height:150px; max-width:200px;" class="text-center" alt=@product.Name />
                        }
                        else
                        {
                            <img src="/images/no-image.png" style="height:150px; max-width:200px;" class="text-center" alt="Sin imagen" />
                        }
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text">@product.Description</p>
                        <div class="price-tag">@($"{product.Price:C2}")</div>
                    </div>
                    <div class="card-footer text-center">
                        <a href="/orders/details/@product.Id" class="btn btn-sm btn-secondary"><i class="oi oi-info" /> Detalles</a>
                        <button class="btn btn-sm btn-primary" @onclick=@(() => AddToCartAsync(product.Id))><i class="oi oi-plus" /> Agregar al Carro</button>
                    </div>
                </div>
            </div>
        }
    </div>
    </div>
}

@code {
    private int currentPage = 1;
    private int totalPages;
    private int counter = 0;
    private bool isAuthenticated;

    public List<Product>? Products { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;


    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }
  

    protected async override Task OnParametersSetAsync()
    {
        await CheckIsAuthenticatedAsync();
        await LoadCounterAsync();
    }

    private async Task CheckIsAuthenticatedAsync()
    {
        var authenticationState = await authenticationStateTask;
        isAuthenticated = authenticationState.User.Identity!.IsAuthenticated;
    }

    private async Task LoadCounterAsync()
    {
        if (!isAuthenticated)
        {
            return;
        }

        var responseHttp = await repository.Get<int>("/api/temporalSales/count");
        if (responseHttp.Error)
        {
            return;
        }
        counter = responseHttp.Response;
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/products?page={page}&RecordsNumber=8";
            url2 = $"api/products/totalPages/?RecordsNumber=8";
        }
        else
        {
            url1 = $"api/products?page={page}&filter={Filter}&RecordsNumber=8";
            url2 = $"api/products/totalPages?filter={Filter}&RecordsNumber=8";
        }

        try
        {
            var responseHppt = await repository.Get<List<Product>>(url1);
            var responseHppt2 = await repository.Get<int>(url2);
            Products = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ApplyFilterAsync();
        }
    }

    private async Task AddToCartAsync(int productId)
    {
        if (!isAuthenticated)
        {
            navigationManager.NavigateTo("/Login");
            var toast1 = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = false,
                Timer = 5000
            });
            await toast1.FireAsync(icon: SweetAlertIcon.Error, message: "Debes haber iniciado sesión para poder agregar productos al carro de compras.");
            return;
        }

        // var temporalSaleDTO = new TemporalSaleDTO
        // {
        //     ProductId = productId
        // };

        // var httpResponse = await repository.Post("/api/temporalSales", temporalSaleDTO);
        // if (httpResponse.Error)
        // {
        //     var message = await httpResponse.GetErrorMessageAsync();
        //     await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        //     return;
        // }

        await LoadCounterAsync();

        var toast2 = sweetAlertService.Mixin(new SweetAlertOptions
        {
            Toast = true,
            Position = SweetAlertPosition.TopEnd,
            ShowConfirmButton = false,
            Timer = 5000
        });
        await toast2.FireAsync(icon: SweetAlertIcon.Success, message: "Producto agregado al carro de compras.");
    }
}
