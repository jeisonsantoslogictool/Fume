@page "/"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@using Microsoft.AspNetCore.Components.Web
@inherits LayoutComponentBase
@layout MainLayout
@using MudBlazor
@using Fume.Web.Helpers

<style type="text/css">
    /* Header Section */
    .header-section {
        background-color: #fff;
        padding: 20px 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }

    .header-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .logo-section img {
        height: 60px;
        cursor: pointer;
    }

    .search-section {
        flex-grow: 1;
        max-width: 600px;
        margin: 0 40px;
    }

    .smart-search {
        position: relative;
        width: 100%;
    }

    .smart-search input {
        width: 100%;
        padding: 12px 50px 12px 20px;
        border: 2px solid #e0e0e0;
        border-radius: 25px;
        font-size: 16px;
        transition: all 0.3s ease;
    }

    .smart-search input:focus {
        outline: none;
        border-color: #25b09b;
        box-shadow: 0 0 10px rgba(37, 176, 155, 0.2);
    }

    .smart-search button {
        position: absolute;
        right: 5px;
        top: 50%;
        transform: translateY(-50%);
        background-color: #1b70b3;
        border: none;
        border-radius: 20px;
        padding: 8px 20px;
        color: white;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .smart-search button:hover {
        background-color: #1e9382;
    }

    .cart-section {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    /* Banner Section */
    .banner-section {
        width: 100%;
        height: 400px;
        background-image: url('/Fullfondo.png');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        margin-bottom: 40px;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .banner-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.3);
    }

    .banner-content {
        position: relative;
        z-index: 1;
        text-align: center;
        color: white;
    }

    .banner-content h1 {
        font-size: 3rem;
        font-weight: bold;
        margin-bottom: 20px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    }

    .banner-content p {
        font-size: 1.5rem;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
    }

    /* Breadcrumb */
    .breadcrumb-nav {
        background: #f8f9fa;
        padding: 15px 0;
        margin-bottom: 30px;
        border-radius: 8px;
    }

    .breadcrumb-nav a {
        color: #2196F3;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.3s;
    }

    .breadcrumb-nav a:hover {
        color: #1976D2;
        text-decoration: underline;
    }

    /* Category/SubCategory Grid */
    .category-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 0;
        padding: 20px 0;
        
    }

    .category-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 30px 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        border-right: 1px solid #e0e0e0;
        border-bottom: 1px solid #e0e0e0;
     
    }

    .category-item:nth-child(4n) {
        border-right: none;
    }

    .category-item:hover {
       
        transform: scale(1.05);
    }

    .category-image {
       
        overflow: hidden;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 15px;
       
    }

    .category-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .category-item:hover .category-image img {
        transform: scale(1.1);
    }

    .category-image-placeholder {
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 50%;
    }

    .category-info {
        text-align: center;
    }

    .category-name {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 5px;
    }

    .category-count {
        font-size: 0.85rem;
        color: #6c757d;
    }

    /* Product Cards */
    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 25px;
        padding: 20px 0;
    }

    .product-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
        display: flex;
        flex-direction: column;
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0,0,0,0.15);
    }

    .product-image {
        width: 100%;
        height: 220px;
        overflow: hidden;
        background: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .product-image img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
        transition: transform 0.3s ease;
    }

    .product-card:hover .product-image img {
        transform: scale(1.1);
    }

    .product-info {
        padding: 20px;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    .product-name {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 10px;
        min-height: 48px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .product-description {
        font-size: 0.9rem;
        color: #6c757d;
        margin-bottom: 15px;
        min-height: 40px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .product-price {
        font-size: 1.75rem;
        font-weight: bold;
        color: #27ae60;
        margin-bottom: 15px;
    }

    .product-actions {
        display: flex;
        gap: 10px;
        margin-top: auto;
    }

    .section-title {
        font-size: 2rem;
        font-weight: 700;
        color: #2c3e50;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .section-subtitle {
        font-size: 1.1rem;
        color: #6c757d;
        margin-bottom: 30px;
    }

    @@media (max-width: 768px) {
        .header-container {
            flex-direction: column;
            gap: 15px;
        }

        .search-section {
            margin: 0;
            width: 100%;
        }

        .banner-section {
            height: 250px;
        }

        .banner-content h1 {
            font-size: 2rem;
        }

        .banner-content p {
            font-size: 1rem;
        }

        .category-grid {
            grid-template-columns: repeat(2, 1fr);
        }

        .category-item:nth-child(2n) {
            border-right: none;
        }

        .product-grid {
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 15px;
        }
    }

    @@media (max-width: 480px) {
        .category-grid {
            grid-template-columns: repeat(1, 1fr);
        }

        .category-item {
            border-right: none;
        }
    }
</style>

<!-- Header Section -->
<div class="header-section">
    <div class="header-container">
        <div class="logo-section">
            <img src="/Logo.png" alt="Fume Logo" @onclick="@(() => GoToHome())" />
        </div>

        <div class="search-section">
            <div class="smart-search">
                <input type="text"
                       placeholder="Buscar productos..."
                       @bind-value="Filter"
                       @onkeyup="HandleKeyPress" />
                <button @onclick="SearchProducts">
                    <i class="oi oi-magnifying-glass"></i> Buscar
                </button>
            </div>
        </div>

        <div class="cart-section">
            <AuthorizeView>
                <Authorized>
                    @if (counter > 0)
                    {
                        <a href="/Orders/ShowCart" class="btn btn-primary">
                            <i class="oi oi-cart"></i> Carrito (@counter)
                        </a>
                    }
                    else
                    {
                        <a href="/Orders/ShowCart" class="btn btn-outline-primary">
                            <i class="oi oi-cart"></i> Carrito
                        </a>
                    }
                </Authorized>
                <NotAuthorized>
                    <button class="btn btn-outline-primary" @onclick="@(() => navigationManager.NavigateTo("/Login"))">
                        <i class="oi oi-account-login"></i> Iniciar Sesi√≥n
                    </button>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</div>

<!-- Banner Section -->
<div class="banner-section">
    <div class="banner-overlay"></div>
    <div class="banner-content">
        <h1>Bienvenido a IT Plus</h1>
        <p>Encuentra los mejores productos al mejor precio</p>
    </div>
</div>

@if (loading)
{
    <div class="spinner" />
}
else
{
    <div class="container" style="max-width: 1400px;">
        <!-- Breadcrumb Navigation -->
        @if (currentView != ViewType.Categories)
        {
            <div class="breadcrumb-nav">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb mb-0">
                        <li class="breadcrumb-item">
                            <a href="#" @onclick="@(() => GoToHome())" @onclick:preventDefault>
                                <i class="oi oi-home"></i> Inicio
                            </a>
                        </li>
                        @if (currentView == ViewType.SubCategories && selectedCategory != null)
                        {
                            <li class="breadcrumb-item active">@selectedCategory.Name</li>
                        }
                        @if (currentView == ViewType.Products && selectedSubCategory != null)
                        {
                            <li class="breadcrumb-item">
                                <a href="#" @onclick="@(() => GoToSubCategories(selectedCategory!))" @onclick:preventDefault>
                                    @selectedCategory?.Name
                                </a>
                            </li>
                            <li class="breadcrumb-item active">@selectedSubCategory.Name</li>
                        }
                    </ol>
                </nav>
            </div>
        }

        <!-- Categories View -->
        @if (currentView == ViewType.Categories)
        {
            <div class="section-title">
                <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Large" Color="Color.Primary" />
                Explora Nuestras Categor√≠as
            </div>
            <p class="section-subtitle">Selecciona una categor√≠a para ver sus subcategor√≠as</p>

            @if (categories != null && categories.Any())
            {
                <div class="category-grid">
                    @foreach (var category in categories)
                    {
                        <div class="category-item" @onclick="@(() => GoToSubCategories(category))">
                            <div class="category-image">
                                @if (category.Image != null && category.Image.Length > 0)
                                {
                                    <img src="data:image/png;base64,@category.ImageString" alt="@category.Name" />
                                }
                                else
                                {
                                    <div class="category-image-placeholder">
                                        <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Large" Color="Color.Surface" />
                                    </div>
                                }
                            </div>
                            <div class="category-info">
                                <div class="category-name">@category.Name</div>
                                <div class="category-count">
                                    @category.SubCategoriesNumber subcategor√≠as
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Large" Style="opacity: 0.3;" />
                    <p class="text-muted mt-3">No hay categor√≠as disponibles</p>
                </div>
            }
        }

        <!-- SubCategories View -->
        @if (currentView == ViewType.SubCategories)
        {
            <div class="section-title">
                <MudIcon Icon="@Icons.Material.Filled.Label" Size="Size.Large" Color="Color.Info" />
                Subcategor√≠as de @selectedCategory?.Name
            </div>
            <p class="section-subtitle">Selecciona una subcategor√≠a para ver sus productos</p>

            @if (subCategories != null && subCategories.Any())
            {
                <div class="category-grid">
                    @foreach (var subCategory in subCategories)
                    {
                        <div class="category-item" @onclick="@(() => GoToProducts(subCategory))">
                            <div class="category-image">
                                @if (subCategory.Image != null && subCategory.Image.Length > 0)
                                {
                                    <img src="data:image/png;base64,@subCategory.ImageString" alt="@subCategory.Name" />
                                }
                                else
                                {
                                    <div class="category-image-placeholder" style="background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);">
                                        <MudIcon Icon="@Icons.Material.Filled.Label" Size="Size.Large" Color="Color.Surface" />
                                    </div>
                                }
                            </div>
                            <div class="category-info">
                                <div class="category-name">@subCategory.Name</div>
                                <div class="category-count">
                                    @subCategory.ProductSubCategoriesNumber productos
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <MudIcon Icon="@Icons.Material.Filled.Label" Size="Size.Large" Style="opacity: 0.3;" />
                    <p class="text-muted mt-3">No hay subcategor√≠as disponibles en esta categor√≠a</p>
                </div>
            }
        }

        <!-- Products View -->
        @if (currentView == ViewType.Products)
        {
            <div class="section-title">
                <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large" Color="Color.Success" />
                Productos de @selectedSubCategory?.Name
            </div>
            <p class="section-subtitle">Explora nuestra selecci√≥n de productos</p>

            @if (products != null && products.Any())
            {
                <div class="product-grid">
                    @foreach (var product in products)
                    {
                        <div class="product-card">
                            <div class="product-image">
                                @if (product.ProductImages != null && product.ProductImages.Any())
                                {
                                    var firstImage = Convert.ToBase64String(product.ProductImages.First().Imagefile);
                                    <img src="data:image/png;base64,@firstImage" alt="@product.Name" />
                                }
                                else
                                {
                                    <img src="/images/no-image.png" alt="Sin imagen" />
                                }
                            </div>
                            <div class="product-info">
                                <div class="product-name">@product.Name</div>
                                <div class="product-description">@product.Description</div>
                                <div class="product-price">@FormatHelper.FormatPrice(product.Price)</div>
                                <div class="product-actions">
                                    <a href="/orders/details/@product.Id" class="btn btn-sm btn-secondary flex-grow-1">
                                        <i class="oi oi-info"></i> Detalles
                                    </a>
                                    <button class="btn btn-sm btn-primary flex-grow-1" @onclick="@(() => AddToCartAsync(product.Id))">
                                        <i class="oi oi-plus"></i> Agregar
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large" Style="opacity: 0.3;" />
                    <p class="text-muted mt-3">No hay productos disponibles en esta subcategor√≠a</p>
                </div>
            }
        }
    </div>
}

@code {
    private enum ViewType { Categories, SubCategories, Products }

    private ViewType currentView = ViewType.Categories;
    private bool loading = true;
    private int counter = 0;
    private bool isAuthenticated;

    private List<Category>? categories;
    private List<SubCategory>? subCategories;
    private List<Product>? products;

    private Category? selectedCategory;
    private SubCategory? selectedSubCategory;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

    protected async override Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
    }

    protected async override Task OnParametersSetAsync()
    {
        await CheckIsAuthenticatedAsync();
        await LoadCounterAsync();
    }

    private async Task CheckIsAuthenticatedAsync()
    {
        var authenticationState = await authenticationStateTask;
        isAuthenticated = authenticationState.User.Identity!.IsAuthenticated;
    }

    private async Task LoadCounterAsync()
    {
        if (!isAuthenticated)
        {
            return;
        }

        var responseHttp = await repository.Get<int>("/api/temporalSales/count");
        if (responseHttp.Error)
        {
            return;
        }
        counter = responseHttp.Response;
    }

    private async Task LoadCategoriesAsync()
    {
        loading = true;
        var response = await repository.Get<List<Category>>("/api/categories");

        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return;
        }

        categories = response.Response;
        currentView = ViewType.Categories;
        loading = false;
    }

    private async Task GoToSubCategories(Category category)
    {
        loading = true;
        selectedCategory = category;

        var response = await repository.Get<List<SubCategory>>($"/api/subcategories/bycategory/{category.Id}");

        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return;
        }

        subCategories = response.Response;
        currentView = ViewType.SubCategories;
        loading = false;
    }

    private async Task GoToProducts(SubCategory subCategory)
    {
        loading = true;
        selectedSubCategory = subCategory;

        // Cargar productos que tengan esta subcategor√≠a
        var response = await repository.Get<List<Product>>($"/api/products/subcategory/{subCategory.Id}");

        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return;
        }

        products = response.Response;
        currentView = ViewType.Products;
        loading = false;
    }

    private async Task GoToHome()
    {
        selectedCategory = null;
        selectedSubCategory = null;
        subCategories = null;
        products = null;
        Filter = string.Empty;
        await LoadCategoriesAsync();
    }

    private async Task SearchProducts()
    {
        if (string.IsNullOrWhiteSpace(Filter))
        {
            return;
        }

        loading = true;
        var response = await repository.Get<List<Product>>($"/api/products?filter={Filter}");

        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return;
        }

        products = response.Response;
        currentView = ViewType.Products;
        selectedCategory = null;
        selectedSubCategory = null;
        loading = false;
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchProducts();
        }
    }

    private async Task AddToCartAsync(int productId)
    {
        if (!isAuthenticated)
        {
            navigationManager.NavigateTo("/Login");
            var toast1 = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = false,
                Timer = 5000
            });
            await toast1.FireAsync(icon: SweetAlertIcon.Error, message: "Debes haber iniciado sesi√≥n para poder agregar productos al carro de compras.");
            return;
        }

        await LoadCounterAsync();

        var toast2 = sweetAlertService.Mixin(new SweetAlertOptions
        {
            Toast = true,
            Position = SweetAlertPosition.TopEnd,
            ShowConfirmButton = false,
            Timer = 5000
        });
        await toast2.FireAsync(icon: SweetAlertIcon.Success, message: "Producto agregado al carro de compras.");
    }
}
