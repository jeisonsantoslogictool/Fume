<div>
    <label>@Label</label>
    <div>
        <InputFile OnChange="OnChange" accept=".jpg,.jpeg,.png" />

        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
            <ActivatorContent>
                <MudIconButton Color="Color.Info"
                      Icon="@Icons.Material.Filled.PhotoCamera">
              </MudIconButton>
            </ActivatorContent>
       </MudFileUpload>


    </div>
</div>

<div>
    @if (imageBase64 is not null)
    {
        <div>
            <div style="margin: 10px">
                <img src="data:image/jpeg;base64, @imageBase64" style="width:400px" />
            </div>
        </div>
    }

    @if (ImageURL is not null)
    {
        <div>
            <div style="margin: 10px">
                <img src="@ImageURL" style="width:400px" />
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string Label { get; set; } = "Imagen";
    [Parameter] public string? ImageURL { get; set; }
    [Parameter] public EventCallback<string> ImageSelected { get; set; }
    private string? imageBase64;
    IList<IBrowserFile> _files = new List<IBrowserFile>();
    private async Task UploadFiles(IBrowserFile file)
    {
        _files.Add(file);
        var imagen = file;

        var arrBytes = new byte[imagen.Size];
        await imagen.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10).ReadAsync(arrBytes);
        imageBase64 = Convert.ToBase64String(arrBytes);
        ImageURL = null;
        await ImageSelected.InvokeAsync(imageBase64);
        StateHasChanged();
    }
    async Task OnChange(InputFileChangeEventArgs e)
    {
        var imagenes = e.GetMultipleFiles();

        foreach (var imagen in imagenes)
        {
            var arrBytes = new byte[imagen.Size];
            await imagen.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10).ReadAsync(arrBytes);
            imageBase64 = Convert.ToBase64String(arrBytes);
            ImageURL = null;
            await ImageSelected.InvokeAsync(imageBase64);
            StateHasChanged();
        }
    }
}
